{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ceil from '@stdlib/math-base-special-ceil' ;\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport MAX_LENGTH from '@stdlib/constants-uint32-max' ;\nimport gen from '@stdlib/array-base-incrspace' ;\n\n\n// MAIN //\n\n/**\n* Generates a linearly spaced numeric array using a provided increment.\n*\n* @param {number} x1 - first array value\n* @param {number} x2 - array element bound\n* @param {number} [increment=1] - increment\n* @throws {TypeError} first argument must be numeric\n* @throws {TypeError} second argument must be numeric\n* @throws {TypeError} third argument must be numeric\n* @throws {RangeError} length of created array must be less than `4294967295` (`2**32 - 1`)\n* @returns {Array} linearly spaced numeric array\n*\n* @example\n* var arr = incrspace( 0, 11, 2 );\n* // returns [ 0, 2, 4, 6, 8, 10 ]\n*/\nfunction incrspace( x1, x2, increment ) {\n\tvar len;\n\tvar inc;\n\tif ( !isNumber( x1 ) || isnan( x1 ) ) {\n\t\tthrow new TypeError( format( '00S2s', x1 ) );\n\t}\n\tif ( !isNumber( x2 ) || isnan( x2 ) ) {\n\t\tthrow new TypeError( format( '00S2t', x2 ) );\n\t}\n\tif ( arguments.length < 3 ) {\n\t\tinc = 1;\n\t} else {\n\t\tinc = increment;\n\t\tif ( !isNumber( inc ) || isnan( inc ) ) {\n\t\t\tthrow new TypeError( format( '00S2u', inc ) );\n\t\t}\n\t}\n\tlen = ceil( ( x2-x1 ) / inc );\n\tif ( len > MAX_LENGTH ) {\n\t\tthrow new RangeError( format( '00S06' ) );\n\t}\n\treturn gen( x1, x2, inc );\n}\n\n\n// EXPORTS //\n\nexport default incrspace;\n"],"names":["incrspace","x1","x2","increment","inc","isNumber","isnan","TypeError","format","arguments","length","ceil","MAX_LENGTH","RangeError","gen"],"mappings":";;yiBAgDA,SAASA,EAAWC,EAAIC,EAAIC,GAC3B,IACIC,EACJ,IAAMC,EAAUJ,IAAQK,EAAOL,GAC9B,MAAM,IAAIM,UAAWC,EAAQ,QAASP,IAEvC,IAAMI,EAAUH,IAAQI,EAAOJ,GAC9B,MAAM,IAAIK,UAAWC,EAAQ,QAASN,IAEvC,GAAKO,UAAUC,OAAS,EACvBN,EAAM,OAGN,IAAMC,EADND,EAAMD,IACmBG,EAAOF,GAC/B,MAAM,IAAIG,UAAWC,EAAQ,QAASJ,IAIxC,GADMO,GAAQT,EAAGD,GAAOG,GACbQ,EACV,MAAM,IAAIC,WAAYL,EAAQ,UAE/B,OAAOM,EAAKb,EAAIC,EAAIE,EACrB"}